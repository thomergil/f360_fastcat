#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'logger'

# Constants
DEFAULT_FEEDRATE_THRESHOLD = 0.75
DEFAULT_SAFE_HEIGHT        = 15.0
MIN_SAFE_HEIGHT           = 1.0
TOOL_CHANGE_PREFIX        = '(Tool change sequence for file'
COMMAND_STOP_SPINDLE      = 'M5'
COMMAND_RETRACT           = 'G0 Z'
COMMAND_HOME_Z            = 'G28 G91 Z0'
COMMAND_ABSOLUTE_MODE     = 'G90'

class FusionGCodeFixer
  def initialize(input_files, verbose: false, fast: false, safe_height_override: nil,
                 feedrate_threshold: DEFAULT_FEEDRATE_THRESHOLD, dry_run: false)
    @input_files = input_files
    @verbose = verbose
    @fast = fast
    @safe_height_override = safe_height_override
    @feedrate_threshold = feedrate_threshold
    @dry_run = dry_run
    @tool_numbers = {} # Cache for tool numbers
    @logger = Logger.new($stdout)
    @logger.level = verbose ? Logger::INFO : Logger::WARN
    @logger.formatter = proc { |_severity, _datetime, _progname, msg| "#{msg}\n" }

    validate_files
  end

  def validate_files
    @input_files.each do |file|
      unless File.readable?(file)
        raise ArgumentError, "Cannot read file: #{file}"
      end
    end
  end

  # Extract tool number and description from the file.
  def get_tool_by_file(file)
    if @tool_numbers[file]
      return @tool_numbers[file]
    end

    tool_info = {
      number: nil,
      description: nil
    }

    File.readlines(file).each do |line|
      if match = line.match(/\(T(\d+)\s+([^)]+)\)/)
        tool_info[:number] = match[1].to_i
        tool_info[:description] = match[2].strip
        break
      end
    end

    # implicitly returns tool_info
    @tool_numbers[file] = tool_info
  end

  def analyze_safe_heights(lines)
    if @safe_height_override
      @logger.info("Using user-specified safe height: #{@safe_height_override}mm")
      return @safe_height_override
    end

    potential_heights = []
    current_z = nil
    last_feedrate = nil

    lines.each do |line|
      if line =~ /\bZ([-\d.]+)/
        new_z = ::Regexp.last_match(1).to_f
        feedrate = nil
        feedrate = ::Regexp.last_match(1).to_f if line =~ /F([\d.]+)/
        if feedrate && last_feedrate && (feedrate < last_feedrate * @feedrate_threshold && current_z)
          potential_heights << current_z
        end
        current_z = new_z
        last_feedrate = feedrate if feedrate
      end
    end

    potential_heights.reject! { |h| h < MIN_SAFE_HEIGHT }
    height = potential_heights.max
    unless height
      @logger.warn("No valid Z moves found, defaulting to #{DEFAULT_SAFE_HEIGHT}mm")
      height = DEFAULT_SAFE_HEIGHT
    end

    @logger.info("Found safe height: #{height}mm")
    height
  end

  def optimize_line(line, current_z, safe_height)
    stripped = line.strip
    return [stripped, current_z] if stripped.empty? || stripped.start_with?('(')

    if stripped =~ /\bZ([-\d.]+)/
      current_z = ::Regexp.last_match(1).to_f
    end

    if stripped =~ (/\b(G0|G1)\b/) && (@fast && current_z && current_z >= safe_height)
      stripped = stripped.gsub(/G1/, 'G0').gsub(/F[\d.]+/, '')
      stripped = stripped.squeeze(' ').strip
    end

    [stripped, current_z]
  end

  def tool_change_sequence(file_number, safe_height)
    [
      '',
      "#{TOOL_CHANGE_PREFIX} #{file_number + 1})",
      COMMAND_STOP_SPINDLE,
      'M0 (Pause for tool change)',
      "#{COMMAND_RETRACT}#{safe_height}",
      COMMAND_HOME_Z,
      COMMAND_ABSOLUTE_MODE,
      ''
    ]
  end

  def process_file(file, index, safe_height)
    lines = File.readlines(file).map(&:strip)
    prev_file = (index == @input_files.size - 1)

    prev_tool = index.zero? ? nil : get_tool_by_file(@input_files[index - 1])
    this_tool = get_tool_by_file(file)

    # If tools are different (or this is the first file) we need a full header
    # G-codes
    needs_header = index.zero? || (prev_tool && this_tool && prev_tool[:number] != this_tool[:number])

    output = []
    output << "\n" if index.positive?
    output << "(BEGIN FILE: #{File.basename(file)})"
    current_z = nil

    # If tool is changing, add tool change sequence
    if needs_header && !index.zero?
      @logger.info("Tool change detected from T#{prev_tool[:number]} (#{prev_tool[:description]}) to T#{this_tool[:number]} (#{this_tool[:description]})")
      output.concat(tool_change_sequence(index, safe_height))
    elsif index.positive?
      @logger.info("No tool change detected between file #{index} and file #{index + 1}")
      # For same tool transitions, add a safe retract
      output.concat([
                      '(Safe retract)',
                      "G0 Z#{safe_height}", # Safe retract
                      ''
                    ])
    end

    first_move = false

    lines.each do |line|
      stripped = line.strip
      next if stripped.empty?

      # Skip program start/end markers
      next if stripped == '%' # Program start/end marker
      next if stripped == 'M30' && !prev_file # Program end and rewind command; keep it at the end

      # Always skip comments
      next if stripped.start_with?('(')   # Skip all comments

      # Skip homing commands (G28) to avoid unintended re-homing
      # during concatenation, which could disrupt the current tool position
      # and compromise safety.
      next if stripped.match?(/^G28/)

      # Skip explicit Z retract commands because safe height transitions
      # are handled via the tool change sequence or safe retract commands.
      # This prevents redundant or conflicting retract moves.
      next if stripped.match?(/^Z/)

      # For files using the same tool, skip redundant initialization codes:
      unless needs_header
        # Skip tool commands:
        next if stripped.start_with?('T') # Tool selection commands

        # For non-final files, skip redundant M commands to avoid premature or
        # duplicate actions. We allow M3 (spindle start) because it is essential
        # for re-engaging the spindle, while other M commands (such as M5 for
        # spindle stop or program end commands) are omitted.
        next if stripped.start_with?('M') && !prev_file && !stripped.start_with?('M3')

        # Skip Z moves in subsequent files
        next if !index.zero? && stripped.start_with?('Z')
      end

      # Track the first movement command encountered.
      # This check covers:
      # 1. Explicit movement commands: G0 (rapid move) and G1 (linear interpolation).
      # 2. Implicit movement lines: some files may omit the G-code if a modal command
      #    is already in effect, so the line might start directly with an axis coordinate
      #    (X, Y, or Z). In such cases, we treat the line as a movement command.
      #
      # If your G-code uses other movement commands (such as G2 or G3 for arcs),
      # consider adding them to this condition.
      if !first_move && stripped.start_with?('G0', 'G1', 'G2', 'G3', 'X', 'Y', 'Z')
        first_move = true
      end

      stripped, current_z = optimize_line(line, current_z, safe_height)
      output << stripped unless stripped.empty?
    end

    output
  end

  def concatenate
    # Analyze safe height from first file
    first_file_lines = File.readlines(@input_files[0]).map(&:strip)
    safe_height = analyze_safe_heights(first_file_lines)

    final_output = []
    @input_files.each_with_index do |file, idx|
      processed = process_file(file, idx, safe_height)
      final_output.concat(processed)
    end

    # Add program start/end markers
    final_output.unshift('%')  # Start of program
    final_output.push('%')     # End of program

    final_output
  end

  def save_output(output_file)
    final_output = concatenate
    if final_output.empty? || final_output.none? { |line| line =~ /\bG\d+\b/ }
      raise 'Sanity check failed: Output does not contain any G-code commands.'
    end

    if @dry_run
      @logger.info('Dry run mode enabled. The following output would be written:')
      puts final_output.join("\n")
    else
      File.write(output_file, final_output.join("\n"))
    end
  end
end

def main
  options = {
    verbose: false,
    fast: false,
    safe_height: nil,
    feedrate_threshold: DEFAULT_FEEDRATE_THRESHOLD,
    dry_run: false
  }

  opt_parser = OptionParser.new do |opts|
    opts.banner = "Usage: #{$PROGRAM_NAME} [options] input_file1 [input_file2 ...] output_file"
    opts.on('-v', '--verbose', 'Enable verbose mode') { options[:verbose] = true }
    opts.on('--fast', 'Enable fast mode (optimize non-cutting moves)') { options[:fast] = true }
    opts.on('--safe-height VALUE', Float, 'Override safe height (in mm)') { |v| options[:safe_height] = v }
    opts.on('--feedrate-threshold VALUE', Float,
            "Set feedrate drop threshold (default: #{DEFAULT_FEEDRATE_THRESHOLD})") do |v|
      options[:feedrate_threshold] = v
    end
    opts.on('--dry-run', 'Dry run mode: display output without writing to file') { options[:dry_run] = true }
  end

  opt_parser.parse!

  if ARGV.size < 2
    puts opt_parser
    exit 1
  end

  output_file = ARGV.pop
  input_files = ARGV

  fixer = FusionGCodeFixer.new(
    input_files,
    verbose: options[:verbose],
    fast: options[:fast],
    safe_height_override: options[:safe_height],
    feedrate_threshold: options[:feedrate_threshold],
    dry_run: options[:dry_run]
  )
  fixer.save_output(output_file)
  puts "Output written to #{output_file}" unless options[:dry_run]
end

main
